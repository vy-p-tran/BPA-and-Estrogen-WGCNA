# Set the working directory
setwd("C:/Users/CAAT_Lab/Vy/BPA low dose")
getwd()

#Get packages (skip if already installed the package)
source("https://bioconductor.org/biocLite.R")
biocLite("GEOquery")

#Load them: 
library(Biobase)
library(GEOquery)

# Install WGCNA package (skip if already have the package)
source("http://bioconductor.org/biocLite.R") 
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore")) 
install.packages("WGCNA")
                   ##Here the error namespaceExport(ns, exports) came up. I worked in R instead of R Studio, and saw that
                   ##the package Stringi was not installed. So I installed it: install.packages("stringi") and load it library(stringi). 
                   ##Then I reload WGCNA, and voila! It worked!
#get GSE dataset: 
gse = getGEO("GSE50705",  GSEMatrix = TRUE)  #Must set GSEMatrix to TRUE (the default option) to get expression set

#Important line. Do not skip:
options(stringsAsFactors=FALSE)

#Extracting expression data from GSE:
gse = gse[[1]] #DO NOT skip this line. Otherwise, the GSE dataset would be downloaded as a large list, which you don't want. 
genematrix = exprs(gse)

#Subset matrix for BPA and estrogen:
BPA = genematrix[, 1:84]  #Check GSE website for treatment info
es = genematrix[, 174:261]

#Filter BPA genes: 
keepGenesExpr = rank(-rowMeans(BPA))<=10000
BPA_filtered = BPA[keepGenesExpr,]
#Filter Estrogen genes: 
keepGenesExpr0 = rank(-rowMeans(es))<=10000
es_filtered = es[keepGenesExpr0,]

# We work with two sets:
nSets = 2;
# For easier labeling of plots, create a vector holding descriptive names of the two sets.
setLabels = c("BPA", "Estrogen")
shortLabels = c("BPA", "Estrogen")

# Form multi-set expression data: 
multiExpr = vector(mode = "list", length = nSets)
multiExpr[[1]] = list(data = as.data.frame(t(BPA_filtered)));
multiExpr[[2]] = list(data = as.data.frame(t(es_filtered)));

# Check that the data has the correct format for many functions operating on multiple sets:
exprSize = checkSets(multiExpr)
exprSize

##### NOTES: Data set was not filtered for outliers since I haven't figured out a way to match the filtered sample names with the doses in the
             #phenotype data. Will come back to this later. But I did create a diagnostic dendrogram for the samples, and it appeared that 
             #there is only 1 outlier for the BPA dataset. Hope this does not cause an impact on the data analysis. 
             
###### Here we create a multi-set for the pheotype data. TWO METHODS FOR LOADING PHENOTYPE DATA: 
 ##   METHOD 1:Extract phenotype data manually from GSE (non-R solution):
           #•	Google the site for the GSE dataset.
           #•	Open GEO2R for that dataset
           #•	Copy and paste info to Excel
           #•	Copy the column that contains molar concentration
           #•	Paste the column to this website https://convert.town/column-to-comma-separated-list 
           #•	Should be able to get a comma-separated list now for R
           #•	If that doesn’t work, paste the above comma-separated list to Microsoft Word.
           #•	In Word, press Ctrl-H to open Find and Replace. Find “,” and replace with “, “ to add a space “ “ between values. Should work now.
 
           #create a table for phenotyphic data for BPA: 
           BPA_molar = as.list(c(0, 1.00E-06, 1.00E-04, 1.25E-05, 1.56E-08, 2.50E-07, 2.50E-05, 3.13E-06, 5.00E-05, 6.25E-08, 0, 1.00E-06, 1.25E-07, 1.56E-08, 2.50E-07, 2.00E-06, 4.00E-06, 5.00E-07, 6.25E-08, 8.00E-06, 0, 1.00E-06, 1.25E-07, 1.56E-08, 2.50E-07, 2.00E-06, 4.00E-06, 5.00E-07, 6.25E-08, 8.00E-06, 0, 1.56E-06, 1.95E-09, 1.95E-12, 1.00E-06, 1.25E-05, 1.25E-07, 1.56E-08, 2.50E-07, 2.50E-10, 2.50E-05, 3.13E-06, 3.91E-12, 3.13E-08, 3.13E-11, 5.00E-07, 5.00E-05, 6.25E-06, 6.25E-08, 6.25E-11, 7.81E-09, 0, 1.56E-06, 1.95E-09, 1.95E-12, 1.00E-06, 1.25E-05, 1.25E-07, 1.25E-10, 1.56E-08, 2.50E-05, 2.50E-07, 2.50E-10, 3.125E-6, 3.91E-09, 3.13E-08, 3.13E-11, 5.00E-05, 5.00E-07, 5.00E-10, 6.25E-06, 6.25E-08, 7.81E-09, 7.81E-12, 0, 1.95E-09, 1.00E-06, 1.25E-05, 1.56E-08, 2.50E-07, 2.50E-10, 3.12E-06, 5.00E-05, 6.25E-08))
           setSamples_BPA = rownames(multiExpr[[1]]$data)
           Traits_BPA = rbind(setSamples_BPA, BPA_molar)

           #create a table for phenotyphic data for Estrogen:
           es_molar = as.list(c(0, 5.00E-14, 1.00E-13, 5.00E-13, 1.00E-12, 1.00E-11, 1.00E-10, 2.00E-11, 4.00E-12, 4.00E-11, 6.00E-12, 6.00E-11, 8.00E-11, 0, 5.00E-14, 1.00E-13, 5.00E-13, 1.00E-12, 1.00E-11, 2.00E-12, 2.00E-11, 4.00E-12, 4.00E-11, 6.00E-12, 6.00E-11, 8.00E-11, 0, 5.00E-14, 1.00E-13, 5.00E-13, 1.00E-12, 1.00E-11, 1.00E-10, 2.00E-12, 2.00E-11, 4.00E-12, 4.00E-11, 6.00E-12, 6.00E-11, 8.00E-12, 8.00E-11, 0, 5.00E-14, 1.00E-13, 5.00E-13, 1.00E-12, 1.00E-11, 1.00E-10, 2.00E-12, 2.00E-11, 4.00E-12, 4.00E-11, 6.00E-12, 6.00E-11, 8.00E-12, 8.00E-11, 0, 5.00E-14, 1.00E-13, 5.00E-13, 1.00E-12, 1.00E-11, 1.00E-10, 2.00E-12, 2.00E-11, 4.00E-12, 4.00E-11, 6.00E-12, 6.00E-11, 8.00E-12, 8.00E-11, 0, 0, 0, 1.00E-07, 1.00E-07, 1.00E-08, 1.00E-08, 1.00E-08, 1.00E-06, 1.00E-06, 1.00E-06, 1.00E-09, 1.00E-09, 1.00E-09, 8.00E-11, 8.00E-11, 8.00E-11))
           setSamples_es = rownames(multiExpr[[2]]$data)
          Traits_es = rbind(setSamples_es, es_molar)
#OR 

 ##   METHOD 2: Use the pData function to read phenotype data (MUCH faster!):
           #Extract phenodata from GSE (will get a dataframe):
           phenoData <-pData(gse[1])
           #Understand the data set:
           dim(phenoData)
           
           #Only subset columns that hold information we need (sample names, treatment names, and molar concentrations).
           dose = phenoData[ c(1,2, 41)]
           #See how big the traits are and what are the trait and sample names
           dim(dose)
           names(dose)
           
           #Create separate dataframes for BPA and ES.
           doseBPA = dose[1:84, c(0,1,3)] #The row numbers were determined by looking at the "dose" dataframe. 
           doseES = dose[174:261, c(0,1,3)]
           
           #Form a multi-set structure that will hold the pheotype data.
           nSets = 2
           Traits = vector(mode="list", length = nSets);
           Traits[[1]] = list(data = as.data.frame(doseBPA));
           Traits[[2]] = list(data = as.data.frame(doseES));
   
# Now we have the expression data for both sets in the variable multiExpr, and the corresponding clinical traits in the variable Traits. 
#Should save these objects before continuing. 
save(multiExpr, Traits, exprSize,
file = "Consensus-dataInput_06_20_2018.RData");

#### NETWORK TOPOLOGY ANALYSIS: with a soft-thresholding power approach. 
# Choose a set of soft-thresholding powers
powers = c(seq(4,10,by=1), seq(12,20, by=2));
# Initialize a list to hold the results of scale-free analysis
powerTables = vector(mode = "list", length = nSets);
# Call the network topology analysis function for each set in turn
for (set in 1:nSets)
powerTables[[set]] = list(data = pickSoftThreshold(multiExpr[[set]]$data, powerVector=powers,
verbose = 2)[[2]]);
collectGarbage();

# Plot the results:
colors = c("black", "red")
# Will plot these columns of the returned scale free analysis tables
plotCols = c(2,5,6,7)
colNames = c("Scale Free Topology Model Fit", "Mean connectivity", "Median connectivity",
"Max connectivity");

# Get the minima and maxima of the plotted points
ylim = matrix(NA, nrow = 2, ncol = 4);
for (set in 1:nSets)
{
for (col in 1:length(plotCols))
2
{
ylim[1, col] = min(ylim[1, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
ylim[2, col] = max(ylim[2, col], powerTables[[set]]$data[, plotCols[col]], na.rm = TRUE);
}
}
# Plot the quantities in the chosen columns vs. the soft thresholding power
sizeGrWindow(8, 6)

par(mfcol = c(2,2));
par(mar = c(4.2, 4.2 , 2.2, 0.5))
cex1 = 0.7;
for (col in 1:length(plotCols)) for (set in 1:nSets)
{
if (set==1)
{
plot(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
xlab="Soft Threshold (power)",ylab=colNames[col],type="n", ylim = ylim[, col],
main = colNames[col]);
addGrid();
}
if (col==1)
{
text(powerTables[[set]]$data[,1], -sign(powerTables[[set]]$data[,3])*powerTables[[set]]$data[,2],
labels=powers,cex=cex1,col=colors[set]);
} else
text(powerTables[[set]]$data[,1], powerTables[[set]]$data[,plotCols[col]],
labels=powers,cex=cex1,col=colors[set]);
if (col==1)
{
legend("bottomright", legend = setLabels, col = colors, pch = 20) ;
} else
legend("topright", legend = setLabels, col = colors, pch = 20) ;
}

#Pick the most appropritate power based on the above results. 

#### ONE-STEP NETWORK CONSTRUCTION AND MODULE DETECTION:

net = blockwiseConsensusModules(
multiExpr, power = 10, minModuleSize = 100,  maxBlockSize=10000, deepSplit = 2, #Set maxblocksize to 10000. The default value is 5000).
#Read the help file of this function for more information about parameter adjustment. 
pamRespectsDendro = FALSE,
mergeCutHeight = 0.25, numericLabels = TRUE,
minKMEtoStay = 0,
saveTOMs = TRUE, verbose = 5)

# For now we only need the module labels contained in the component colors, the module eigengenes for each data set contained in multiMEs, 
#and the gene dendrogram (clustering tree) in dendrograms[[1]]:

consMEs = net$multiMEs;
moduleLabels = net$colors;
# Convert the numeric labels to color labels
moduleColors = labels2colors(moduleLabels)
consTree = net$dendrograms[[1]];
#Plot it: 
sizeGrWindow(8,6);
plotDendroAndColors(consTree, moduleColors,
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05,
main = "Consensus gene dendrogram and module colors")

#Before we end, we save the information necessary for subsequent analyses
save(consMEs, moduleLabels, moduleColors, consTree, file = "Consensus-NetworkConstruction-auto-BPA and Estrogen_06_20_2018.RData")

